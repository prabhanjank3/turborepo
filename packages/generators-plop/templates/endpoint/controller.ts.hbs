/* eslint-disable @typescript-eslint/no-unused-vars */
import { Request, Response } from 'express';
import { {{pascalCase name}} } from '../db/{{camelCase name}}.model';

export const getAll{{pascalCase name}}s = async (_req: Request, res: Response) => {
  try {
    const items = await {{pascalCase name}}.findAll();
    res.json(items);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch {{camelCase name}}s' });
  }
};

export const get{{pascalCase name}}ById = async (req: Request, res: Response) => {
  try {
    const item = await {{pascalCase name}}.findByPk(req.params.id);
    if (!item) {
      return res.status(404).json({ error: '{{pascalCase name}} not found' });
    }
    res.json(item);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch {{camelCase name}}' });
  }
};

export const create{{pascalCase name}} = async (req: Request, res: Response) => {
  try {
    const newItem = await {{pascalCase name}}.create(req.body);
    res.status(201).json(newItem);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create {{camelCase name}}' });
  }
};

export const update{{pascalCase name}} = async (req: Request, res: Response) => {
  try {
    const item = await {{pascalCase name}}.findByPk(req.params.id);
    if (!item) {
      return res.status(404).json({ error: '{{pascalCase name}} not found' });
    }
    await item.update(req.body);
    res.json(item);
  } catch (error) {
    res.status(500).json({ error: 'Failed to update {{camelCase name}}' });
  }
};

export const delete{{pascalCase name}} = async (req: Request, res: Response) => {
  try {
    const item = await {{pascalCase name}}.findByPk(req.params.id);
    if (!item) {
      return res.status(404).json({ error: '{{camelCase name}} not found' });
    }
    await item.destroy();
    res.json({ message: '{{pascalCase name}} deleted successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to delete {{camelCase name}}' });
  }
};
